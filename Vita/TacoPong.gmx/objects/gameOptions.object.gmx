<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>opFor = 0;
// Options for 
// 0 = pvp
// 1 = pve

status = 0;
// 0 = end point
// 1 = level
// 2 = difficulty

menuIndex = 0;
endpoint = array_create(6);
endpoint[0]=3;
endpoint[1]=5;
endpoint[2]=7;
endpoint[3]=10;
endpoint[4]=15;
endpoint[5]=21;
levels = 0;
/* 0 = random
   1 = tv
   2 = octopus
   3 = dolphin
   4 = illuminati
   5 = slots
*/
difficulty = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (opFor == 0)
{
// PVP

// Get Win Amount
if (status == 0)
{
if (keyboard_check_pressed(vk_right) || gamepad_button_check_pressed(0, gp_padr))
{
if (menuIndex &lt; array_length_1d(endpoint)-1)
{
menuIndex++;
}
else if (menuIndex &gt;= array_length_1d(endpoint)-1)
{
menuIndex = 0;
}
}
else if (keyboard_check_pressed(vk_left) || gamepad_button_check_pressed(0, gp_padl))
{
if (menuIndex &gt; 0)
{
menuIndex--;
}
else if (menuIndex &lt;= 0)
{
menuIndex = array_length_1d(endpoint)-1;
}
}
else if (keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0, gp_face1))
{
global.playUntil = endpoint[menuIndex];
status++;
}
else if (keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0, gp_face2))
{
//instance_creae_(192, 96, 1, MenuManager
instance_create(192,96, MenuManager);
//instance_create_depth(704, 288, 1, obj_Tbell_Logo);
instance_create(704, 288, obj_Tbell_logo);
instance_destroy(self);
}
}

// Get Level
else if (status == 1)
{
if (keyboard_check_pressed(vk_right) || gamepad_button_check_pressed(0, gp_padr))
{
if (levels &lt; 5)
{
levels++;
}
else if (levels &gt;= 5)
{
levels = 0;
}
}
else if (keyboard_check_pressed(vk_left) || gamepad_button_check_pressed(0, gp_padl))
{
if (levels &gt; 0)
{
levels--;
}
else if (levels &lt;= 0)
{
levels = 5;
}
}
else if (keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0, gp_face1))
{
status = 0;
menuIndex = 0;
global.gameLevel = levels;
levels = 0;
audio_play_sound(snd_gong, 1, false);
instance_create(0, 0, fade);
//room_goto(testRoom2p);
instance_destroy(self);
}
else if (keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0, gp_face2))
{
status--;
}
}
}
else if (opFor == 1)
{
// PVE
// Get Win Amount
if (status == 0)
{
if (keyboard_check_pressed(vk_right) || gamepad_button_check_pressed(0, gp_padr))
{
if (menuIndex &lt; array_length_1d(endpoint)-1)
{
menuIndex++;
}
else if (menuIndex &gt;= array_length_1d(endpoint)-1)
{
menuIndex = 0;
}
}
else if (keyboard_check_pressed(vk_left) || gamepad_button_check_pressed(0, gp_padl))
{
if (menuIndex &gt; 0)
{
menuIndex--;
}
else if (menuIndex &lt;= 0)
{
menuIndex = array_length_1d(endpoint)-1;
}
}
else if (keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0, gp_face1))
{
global.playUntil = endpoint[menuIndex];
status++;
}
else if (keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0, gp_face2))
{
//instance_create_depth(192, 96, 1, MenuManager);
//instance_create_depth(704, 288, 1, obj_Tbell_Logo);
instance_create(192, 96, MenuManager);
instance_create(704, 288, obj_Tbell_logo);
instance_destroy(self);
}
}

// Get Level
else if (status == 1)
{
if (keyboard_check_pressed(vk_right) || gamepad_button_check_pressed(0, gp_padr))
{
if (levels &lt; 5)
{
levels++;
}
else if (levels &gt;= 5)
{
levels = 0;
}
}
else if (keyboard_check_pressed(vk_left) || gamepad_button_check_pressed(0, gp_padl))
{
if (levels &gt; 0)
{
levels--;
}
else if (levels &lt;= 0)
{
levels = 5;
}
}
else if (keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0, gp_face1))
{
menuIndex = 0;
global.gameLevel = levels;
levels = 0;
status++;
//room_goto(testRoom2p);
//instance_destroy(self);
}
else if (keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0, gp_face2))
{
status--;
}
}

// Get Difficulty
else if (status == 2)
{
if (keyboard_check_pressed(vk_right) || gamepad_button_check_pressed(0, gp_padr))
{
if (difficulty &lt; 4)
{
difficulty++;
}
else if (difficulty &gt;= 4)
{
difficulty = 0;
}
}
else if (keyboard_check_pressed(vk_left) || gamepad_button_check_pressed(0, gp_padl))
{
if (difficulty &gt; 0)
{
difficulty--;
}
else if (difficulty &lt;= 0)
{
difficulty = 4;
}
}
else if (keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0, gp_face1))
{
status = 0;
menuIndex = 0;
global.aiLevel = difficulty;
audio_play_sound(snd_gong, 1, false);
instance_create(0, 0, fade);
//room_goto(testRoom2p);
instance_destroy(self);
}
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (status == 0)
{
draw_text((room_width/2)-(string_width("Points to Win:")/2), room_height/2, "Points to Win:");
draw_text((room_width/2)-(string_width(string(endpoint[menuIndex]))/2), room_height/2+25, string(endpoint[menuIndex]));
}
else if (status ==1)
{
draw_text((room_width/2)-(string_width("Level:")/2), room_height/2, "Level:");
if (levels == 0)
{
draw_text((room_width/2)-(string_width("Random")/2), room_height/2+25, "Random");
}
else if (levels == 1)
{
draw_text((room_width/2)-(string_width("Taco TV")/2), room_height/2+25, "Taco TV");
}
else if (levels == 2)
{
draw_text((room_width/2)-(string_width("Octopus")/2), room_height/2+25, "Octopus");
}
else if (levels == 3)
{
draw_text((room_width/2)-(string_width("Dolphins")/2), room_height/2+25, "Dolphins");
}
else if (levels == 4)
{
draw_text((room_width/2)-(string_width("Illuminati")/2), room_height/2+25, "Illuminati");
}
else if (levels == 5)
{
draw_text((room_width/2)-(string_width("Slots")/2), room_height/2+25, "Slots");
}
}
else if (status == 2)
{
draw_text((room_width/2)-(string_width("Difficulty:")/2), room_height/2, "Difficulty:");
if (difficulty == 0)
{
draw_text((room_width/2)-(string_width("Baby")/2), room_height/2+25, "Baby");
}
else if (difficulty == 1)
{
draw_text((room_width/2)-(string_width("Easy")/2), room_height/2+25, "Easy");
}
else if (difficulty == 2)
{
draw_text((room_width/2)-(string_width("Average")/2), room_height/2+25, "Average");
}
else if (difficulty == 3)
{
draw_text((room_width/2)-(string_width("Hard")/2), room_height/2+25, "Hard");
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
